package platform

import (
	"fmt"
	"sort"
	"strings"

	"github.com/gocarina/gocsv"
)

// GoogleWorkspaceUsers parses the CSV file generated by the users page.
type GoogleWorkspaceUsers struct{}

func (p *GoogleWorkspaceUsers) Description() ProcessorDescription {
	return ProcessorDescription{
		Kind: "google-workspace-users",
		Name: "Google Workspace Users",
		Steps: []string{
			"Open https://admin.google.com/ac/users",
			"Click Download users",
			"Select 'All user info Columns'",
			"Select 'Comma-separated values (.csv)'",
			"Download resulting CSV file for analysis",
			"Execute 'yacls --kind={{.Kind}} --input={{.Path}}'",
		},
	}
}

type googleWorkspaceUserRecord struct {
	EmailAddress      string `csv:"Email Address [Required]"`
	Status            string `csv:"Status [READ ONLY]"`
	OrgUnit           string `csv:"Org Unit Path [Required]"`
	FirstName         string `csv:"First Name [Required]"`
	LastName          string `csv:"Last Name [Required]"`
	LastSignIn        string `csv:"Last Sign In [READ ONLY]"`
	TwoFactorEnforced string `csv:"2sv Enforced [READ ONLY]"`
}

func (p *GoogleWorkspaceUsers) Process(c Config) (*Artifact, error) {
	src, err := NewSourceFromConfig(c, p)
	if err != nil {
		return nil, fmt.Errorf("source: %w", err)
	}

	a := &Artifact{Metadata: src}
	records := []googleWorkspaceUserRecord{}
	if err := gocsv.UnmarshalBytes(src.content, &records); err != nil {
		return nil, fmt.Errorf("unmarshal: %w", err)
	}

	orgs := map[string]*Group{}

	for _, r := range records {
		username, _, _ := strings.Cut(r.EmailAddress, "@")
		org := strings.TrimPrefix(r.OrgUnit, "/")
		u := User{
			Account: username,
			Name:    strings.TrimSpace(r.FirstName) + " " + strings.TrimSpace(r.LastName),
			Org:     org,
		}

		if org != "" {
			if orgs[org] == nil {
				orgs[org] = &Group{Name: org}
			}
			orgs[org].Members = append(orgs[org].Members, username)
		}

		if strings.ToLower(r.Status) != "active" {
			u.Status = r.Status
		}

		if strings.ToLower(r.TwoFactorEnforced) != "true" {
			u.TwoFactorDisabled = true
		}

		if strings.Contains(u.Account, "service-account") || strings.Contains(strings.ToLower(u.Name), "service account") {
			a.Bots = append(a.Bots, u)
			continue
		}

		a.Users = append(a.Users, u)
	}

	for _, o := range orgs {
		sort.Strings(o.Members)
		a.Orgs = append(a.Orgs, *o)
	}

	return a, nil
}
