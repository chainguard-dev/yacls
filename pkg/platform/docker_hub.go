package platform

import (
	"bytes"
	"fmt"
	"log"
	"regexp"

	"github.com/PuerkitoBio/goquery"
)

var DockerHubRoles = map[string]string{
	"Site admin": "admin",
	"Can design": "designer",
}

// DockerHubMembers parses the CSV file generated by the OnePassword Team page.
type DockerHubMembers struct{}

func (p *DockerHubMembers) Description() ProcessorDescription {
	return ProcessorDescription{
		Kind: "docker_hub",
		Name: "DockerHub Members",
		Steps: []string{
			"Open https://hub.docker.com/orgs/<org>/members ",
			"Save this page (Complete)",
			"Collect resulting .html file for analysis (the other files are not necessary)",
			"Execute 'yacls --kind={{.Kind}} --input={{.Path}}'",
		},
		MatchingFilename: regexp.MustCompile(`Docker.*html$`),
	}
}

func (p *DockerHubMembers) Process(c Config) (*Artifact, error) {
	src, err := NewSourceFromConfig(c, p)
	if err != nil {
		return nil, fmt.Errorf("source: %w", err)
	}

	a := &Artifact{Metadata: src}
	doc, err := goquery.NewDocumentFromReader(bytes.NewReader(src.content))
	if err != nil {
		return nil, fmt.Errorf("document: %w", err)
	}
	users := map[string]User{}

	tables := doc.Find("table")
	log.Printf("found %d member tables", tables.Length())

	// Find the members
	memberList := tables.First()

	memberList.Find("tr[data-testid=members-list-member]").Each(func(i int, tr *goquery.Selection) {
		role, _ := tr.Attr("data-memberrole")
		account, _ := tr.Attr("data-username")
		log.Printf("found row for %s (%s)", account, role)

		tr.Find("span[data-testid=members-list-member-email]").Each(func(i int, span *goquery.Selection) {
			email := span.Text()
			log.Printf("span=%s account=%s email=%s", span.Text(), account, email)

			if email != "" {
				users[account] = User{Account: account, Email: email, Role: role}
			}
		})
	})

	for _, u := range users {
		a.Users = append(a.Users, u)
	}

	return a, nil
}
