package platform

import (
	"bytes"
	"fmt"
	"log"
	"regexp"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

var webflowRoles = map[string]string{
	"Site admin": "admin",
	"Can design": "designer",
}

// WebflowMembers parses the CSV file generated by the OnePassword Team page.
type WebflowMembers struct{}

func (p *WebflowMembers) Description() ProcessorDescription {
	return ProcessorDescription{
		Kind: "webflow",
		Name: "Webflow Site Permissions",
		Steps: []string{
			"Open https://webflow.com/dashboard/sites/<site>/site-access",
			"Save this page (Complete)",
			"Collect resulting .html file for analysis (the other files are not necessary)",
			"Execute 'yacls --kind={{.Kind}} --input={{.Path}}'",
		},
		MatchingFilename: regexp.MustCompile(`ebflow.*html$`),
	}
}

func (p *WebflowMembers) Process(c Config) (*Artifact, error) {
	src, err := NewSourceFromConfig(c, p)
	if err != nil {
		return nil, fmt.Errorf("source: %w", err)
	}

	a := &Artifact{Metadata: src}
	doc, err := goquery.NewDocumentFromReader(bytes.NewReader(src.content))
	if err != nil {
		return nil, fmt.Errorf("document: %w", err)
	}
	users := map[string]User{}

	tables := doc.Find("table")

	// Find the members
	siteTable := tables.First()

	siteTable.Find("tr").Each(func(i int, tr *goquery.Selection) {
		name := ""
		account := ""
		role := ""
		perms := []string{}

		tr.Find("p").Each(func(i int, p *goquery.Selection) {
			attr, _ := p.Attr("data-automation-id")
			log.Printf("p=%s, attr=%s", p.Text(), attr)

			if strings.Contains(attr, "email") {
				account, _, _ = strings.Cut(p.Text(), "(")
				account = strings.TrimSpace(account)
				log.Printf("account=%s", account)
			} else {
				log.Printf("member cell=%s", p.Text())
				name, _, _ = strings.Cut(p.Text(), "(")
				name = strings.TrimSpace(name)
				log.Printf("name=%s", name)
			}
		})

		tr.Find("div[data-automation-id=toggle-site-role-settings]").Each(func(i int, div *goquery.Selection) {
			log.Printf("found role settings")

			div.Find("div").Each(func(i int, t *goquery.Selection) {
				if t.Text() == "" {
					return
				}
				role = t.Text()
				if webflowRoles[role] != "" {
					role = webflowRoles[role]
				}
			})
		})

		tr.Find("input[aria-checked=true]").Each(func(i int, div *goquery.Selection) {
			log.Printf("found checkbox")
			perms = append(perms, "publish")
		})

		// They already have all the perms
		if role == "admin" {
			perms = []string{}
		}

		if account != "" {
			users[account] = User{Account: account, Name: name, Role: role, Permissions: perms}
		}
	})

	if tables.Length() > 0 {
		editorTable := tables.Last()
		editorTable.Find("tr").Each(func(i int, tr *goquery.Selection) {
			log.Printf("tr: %v", tr)
			name := ""
			account := ""
			perms := []string{}
			tr.Find("div").Each(func(i int, t *goquery.Selection) {
				if t.Text() == "" {
					return
				}
				if t.Children().Length() > 0 {
					return
				}
				log.Printf("found editor name: %s", t.Text())
				name = t.Text()
			})

			tr.Find("p[data-text=true]").Each(func(i int, t *goquery.Selection) {
				if t.Text() == "" {
					return
				}
				account = t.Text()
				log.Printf("found editor account: %q", account)
			})

			tr.Find("span[data-sc=SwitchLabel]").Each(func(i int, sp *goquery.Selection) {
				if sp.Text() == "On" {
					perms = []string{"publish"}
				}
			})

			_, ok := users[account]
			if !ok && account != "" {
				users[account] = User{Account: account, Name: name, Role: "editor", Permissions: perms}
			}
		})
	}

	for _, u := range users {
		a.Users = append(a.Users, u)
	}

	return a, nil
}
